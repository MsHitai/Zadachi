package sixthteenth.sprint;

import java.util.Collections;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import java.util.stream.Collectors;
import java.util.stream.Stream;

class Dog implements Comparable<Dog> {

    private final String nickname;

    public Dog(String nickname) {
        this.nickname = nickname;
    }

    @Override
    public String toString() {
        return nickname;
    }

    @Override
    public int compareTo(Dog o) {
        return String.CASE_INSENSITIVE_ORDER.compare(o.nickname, this.nickname);
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        Dog dog = (Dog) o;
        return Objects.equals(nickname, dog.nickname);
    }

    @Override
    public int hashCode() {
        return Objects.hash(nickname);
    }
}

public class GenericRecursiveSort {

    public static void main(String[] args) {
        long before = System.currentTimeMillis();
        List<Dog> unsortedDogs = Stream.of(
                        "Дружок", "Дружок", "Дружок", "Дружок", "Дружок", "Дружок", "Дружок",
                        "Дружок", "Дружок", "Дружок", "Дружок", "Дружок", "Дружок", "Дружок",
                        "Дружок", "Дружок", "Дружок", "Дружок", "Дружок", "Дружок", "Дружок", "Дружок",
                        "Дружок", "Дружок", "Дружок", "Дружок", "Дружок", "Дружок", "Дружок", "Дружок", "Дружок",
                        "Дружок", "Дружок", "Дружок", "Дружок", "Дружок", "Дружок", "Дружок", "Дружок", "Дружок",
                        "Дружок", "Дружок", "Дружок", "Дружок", "Дружок", "Дружок", "Дружок", "Дружок", "Дружок",
                        "Дружок", "Дружок", "Дружок", "Дружок", "Дружок", "Дружок", "Дружок", "Дружок", "Дружок",
                        "Дружок", "Дружок", "Дружок", "Дружок", "Дружок", "Дружок", "Дружок", "Дружок", "Дружок", "Дружок",
                        "Дружок", "Дружок", "Дружок", "Дружок", "Дружок", "Дружок", "Дружок", "Дружок", "Дружок",
                        "Дружок", "Дружок", "Дружок", "Дружок", "Дружок", "Дружок", "Дружок", "Дружок", "Дружок",
                        "Дружок", "Дружок", "Дружок", "Дружок", "Дружок", "Дружок", "Дружок", "Дружок", "Дружок",
                        "Дружок", "Дружок", "Дружок", "Дружок", "Дружок", "Дружок", "Дружок", "Дружок", "Дружок",
                        "Дружок", "Дружок", "Дружок", "Дружок", "Дружок", "Дружок", "Дружок", "Дружок", "Дружок",
                        "Дружок", "Дружок", "Дружок", "Дружок", "Дружок", "Дружок", "Дружок", "Пушок", "Тузик", "Ромео",
                        "Дружок", "Дружок", "Дружок", "Дружок", "Дружок", "Дружок", "Дружок", "Дружок",
                        "Дружок", "Дружок", "Дружок", "Дружок", "Дружок", "Дружок", "Дружок", "Дружок", "Дружок",
                        "Дружок", "Дружок", "Дружок", "Дружок", "Дружок", "Дружок", "Дружок", "Дружок", "Дружок",
                        "Дружок", "Дружок", "Дружок", "Дружок", "Дружок", "Дружок", "Дружок", "Дружок", "Дружок",
                        "Дружок", "Дружок", "Дружок", "Дружок", "Дружок", "Дружок", "Дружок", "Дружок", "Дружок",
                        "Дружок", "Дружок", "Дружок", "Дружок", "Дружок", "Дружок", "Дружок", "Дружок", "Дружок", "Дружок",
                        "Дружок", "Дружок", "Дружок", "Дружок", "Дружок", "Дружок", "Дружок", "Дружок", "Дружок",
                        "Дружок", "Дружок", "Дружок", "Дружок", "Дружок", "Дружок", "Дружок", "Дружок", "Дружок",
                        "Дружок", "Дружок", "Дружок", "Дружок", "Дружок", "Дружок", "Дружок", "Дружок", "Дружок",
                        "Дружок", "Дружок", "Дружок", "Дружок", "Дружок", "Дружок", "Дружок", "Дружок", "Дружок",
                        "Дружок", "Дружок", "Дружок", "Дружок", "Дружок",
                        "Дружок", "Дружок", "Дружок", "Дружок", "Дружок", "Дружок", "Дружок", "Дружок",
                        "Дружок", "Дружок", "Дружок", "Дружок", "Дружок", "Дружок", "Дружок", "Дружок", "Дружок",
                        "Дружок", "Дружок", "Дружок", "Дружок", "Дружок", "Дружок", "Дружок", "Дружок", "Дружок",
                        "Дружок", "Дружок", "Дружок", "Дружок", "Дружок", "Дружок", "Дружок", "Дружок", "Дружок",
                        "Дружок", "Дружок", "Дружок", "Дружок", "Дружок", "Дружок", "Дружок", "Дружок", "Дружок",
                        "Дружок", "Дружок", "Дружок", "Дружок", "Дружок", "Дружок", "Дружок", "Дружок", "Дружок", "Дружок",
                        "Дружок", "Дружок", "Дружок", "Дружок", "Дружок", "Дружок", "Дружок", "Дружок", "Дружок",
                        "Дружок", "Дружок", "Дружок", "Дружок", "Дружок", "Дружок", "Дружок", "Дружок", "Дружок",
                        "Дружок", "Дружок", "Дружок", "Дружок", "Дружок", "Дружок", "Дружок", "Дружок", "Дружок",
                        "Дружок", "Дружок", "Дружок", "Дружок", "Дружок", "Дружок", "Дружок", "Дружок", "Дружок",
                        "Дружок", "Дружок", "Дружок", "Дружок", "Дружок",
                        "Дружок", "Дружок", "Дружок", "Дружок", "Дружок", "Дружок", "Дружок", "Дружок",
                        "Дружок", "Дружок", "Дружок", "Дружок", "Дружок", "Дружок", "Дружок", "Дружок", "Дружок",
                        "Дружок", "Дружок", "Дружок", "Дружок", "Дружок", "Дружок", "Дружок", "Дружок", "Дружок",
                        "Дружок", "Дружок", "Дружок", "Дружок", "Дружок", "Дружок", "Дружок", "Дружок", "Дружок",
                        "Дружок", "Дружок", "Дружок", "Дружок", "Дружок", "Дружок", "Дружок", "Дружок", "Дружок",
                        "Дружок", "Дружок", "Дружок", "Дружок", "Дружок", "Дружок", "Дружок", "Дружок", "Дружок", "Дружок",
                        "Дружок", "Дружок", "Дружок", "Дружок", "Дружок", "Дружок", "Дружок", "Дружок", "Дружок",
                        "Дружок", "Дружок", "Дружок", "Дружок", "Дружок", "Дружок", "Дружок", "Дружок", "Дружок",
                        "Дружок", "Дружок", "Дружок", "Дружок", "Дружок", "Дружок", "Дружок", "Дружок", "Дружок",
                        "Дружок", "Дружок", "Дружок", "Дружок", "Дружок", "Дружок", "Дружок", "Дружок", "Дружок",
                        "Дружок", "Дружок", "Дружок", "Дружок", "Дружок",
                        "Дружок", "Дружок", "Дружок", "Дружок", "Дружок", "Дружок", "Дружок", "Дружок",
                        "Дружок", "Дружок", "Дружок", "Дружок", "Дружок", "Дружок", "Дружок", "Дружок", "Дружок",
                        "Дружок", "Дружок", "Дружок", "Дружок", "Дружок", "Дружок", "Дружок", "Дружок", "Дружок",
                        "Дружок", "Дружок", "Дружок", "Дружок", "Дружок", "Дружок", "Дружок", "Дружок", "Дружок",
                        "Дружок", "Дружок", "Дружок", "Дружок", "Дружок", "Дружок", "Дружок", "Дружок", "Дружок",
                        "Дружок", "Дружок", "Дружок", "Дружок", "Дружок", "Дружок", "Дружок", "Дружок", "Дружок", "Дружок",
                        "Дружок", "Дружок", "Дружок", "Дружок", "Дружок", "Дружок", "Дружок", "Дружок", "Дружок",
                        "Дружок", "Дружок", "Дружок", "Дружок", "Дружок", "Дружок", "Дружок", "Дружок", "Дружок",
                        "Дружок", "Дружок", "Дружок", "Дружок", "Дружок", "Дружок", "Дружок", "Дружок", "Дружок",
                        "Дружок", "Дружок", "Дружок", "Дружок", "Дружок", "Дружок", "Дружок", "Дружок", "Дружок",
                        "Дружок", "Дружок", "Дружок", "Дружок", "Дружок",
                        "Дружок", "Дружок", "Дружок", "Дружок", "Дружок", "Дружок", "Дружок", "Дружок",
                        "Дружок", "Дружок", "Дружок", "Дружок", "Дружок", "Дружок", "Дружок", "Дружок", "Дружок",
                        "Дружок", "Дружок", "Дружок", "Дружок", "Дружок", "Дружок", "Дружок", "Дружок", "Дружок",
                        "Дружок", "Дружок", "Дружок", "Дружок", "Дружок", "Дружок", "Дружок", "Дружок", "Дружок",
                        "Дружок", "Дружок", "Дружок", "Дружок", "Дружок", "Дружок", "Дружок", "Дружок", "Дружок",
                        "Дружок", "Дружок", "Дружок", "Дружок", "Дружок", "Дружок", "Дружок", "Дружок", "Дружок", "Дружок",
                        "Дружок", "Дружок", "Дружок", "Дружок", "Дружок", "Дружок", "Дружок", "Дружок", "Дружок",
                        "Дружок", "Дружок", "Дружок", "Дружок", "Дружок", "Дружок", "Дружок", "Дружок", "Дружок",
                        "Дружок", "Дружок", "Дружок", "Дружок", "Дружок", "Дружок", "Дружок", "Дружок", "Дружок",
                        "Дружок", "Дружок", "Дружок", "Дружок", "Дружок", "Дружок", "Дружок", "Дружок", "Дружок",
                        "Дружок", "Дружок", "Дружок", "Дружок", "Дружок",
                        "Дружок", "Дружок", "Дружок", "Дружок", "Дружок", "Дружок", "Дружок", "Дружок",
                        "Дружок", "Дружок", "Дружок", "Дружок", "Дружок", "Дружок", "Дружок", "Дружок", "Дружок",
                        "Дружок", "Дружок", "Дружок", "Дружок", "Дружок", "Дружок", "Дружок", "Дружок", "Дружок",
                        "Дружок", "Дружок", "Дружок", "Дружок", "Дружок", "Дружок", "Дружок", "Дружок", "Дружок",
                        "Дружок", "Дружок", "Дружок", "Дружок", "Дружок", "Дружок", "Дружок", "Дружок", "Дружок",
                        "Дружок", "Дружок", "Дружок", "Дружок", "Дружок", "Дружок", "Дружок", "Дружок", "Дружок", "Дружок",
                        "Дружок", "Дружок", "Дружок", "Дружок", "Дружок", "Дружок", "Дружок", "Дружок", "Дружок",
                        "Дружок", "Дружок", "Дружок", "Дружок", "Дружок", "Дружок", "Дружок", "Дружок", "Дружок",
                        "Дружок", "Дружок", "Дружок", "Дружок", "Дружок", "Дружок", "Дружок", "Дружок", "Дружок",
                        "Дружок", "Дружок", "Дружок", "Дружок", "Дружок", "Дружок", "Дружок", "Дружок", "Дружок",
                        "Дружок", "Дружок", "Дружок", "Дружок", "Дружок",
                        "Белка", "Стрелка", "Бобик", "Афоня",
                        "Волчок")
                .map(Dog::new)
                .collect(Collectors.toList());

        // найдите Белку
        Dog dog = new Dog("Стрелка");
        String result = search(unsortedDogs, dog)
                .map(d -> "А вот и собака по кличке " + d + " нашлась")
                .orElseGet(() -> "Нет собаки по кличке " + dog + " :(");
        long after = System.currentTimeMillis();
        System.out.println(after - before);
        System.out.println(result);
    }

    /*private static <T extends Comparable<T>> Optional<T> search(List<T> unsortedList, T searchObject) {
        if (unsortedList.isEmpty()) {
            return Optional.empty();
        }
        Collections.sort(unsortedList);// искать легче по упорядоченному списку — вам поможет алгоритм сортировки
        int idx = findObject(unsortedList, searchObject);// найдите Белку, учтите, что idx может быть -1, если ничего не нашлось.
        return Optional.ofNullable(unsortedList.get(idx));
    }

    public static <T extends Comparable<T>> int findObject(List<T> objects, T searchObject) {
        if(objects.isEmpty()) {
            return -1;
        }

        int index = 0;

        for (int i = 0; i < objects.size(); i++) {
            if(objects.get(i).compareTo(searchObject) == 0) {
                index = i;
            }
        }

        return index;
    }*/

    private static <T extends Comparable<T>> Optional<T> search(List<T> unsortedList, T searchObject) {
        if (unsortedList.isEmpty()) {
            return Optional.empty();
        }
        Collections.sort(unsortedList);
        return searchObjectRecursive(unsortedList, searchObject, 0, unsortedList.size() - 1);
    }

    private static <T extends Comparable<T>> Optional<T> searchObjectRecursive(List<T> objects, T searchObject, int left, int right) {
        if (left > right) {
            return Optional.empty();
        }

        int mid = left + (right - left) / 2; // Get the middle index

        if (objects.get(mid).compareTo(searchObject) == 0) {
            return Optional.of(objects.get(mid));
        } else if (objects.get(mid).compareTo(searchObject) > 0) {
            return searchObjectRecursive(objects, searchObject, left, mid - 1); // Search left half
        } else {
            return searchObjectRecursive(objects, searchObject, mid + 1, right); // Search right half
        }
    }
}

