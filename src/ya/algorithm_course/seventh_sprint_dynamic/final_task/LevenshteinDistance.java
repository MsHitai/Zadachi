package ya.algorithm_course.seventh_sprint_dynamic.final_task;

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;

/**
 * <a href="https://contest.yandex.ru/contest/25597/run-report/139448029/">...</a>
 * /**
 * -- ПРИНЦИП РАБОТЫ --
 * По условию задачи для двух слов, чтобы измерить между ними расстояние (количество операций, которые мы можем провести,
 * чтобы из одного слова получить другое), мы можем сделать три операции: удалить символ, вставить или заменить один на
 * другой. Для измерения этого расстояния удобно воспользоваться матрицей решая подзадачи (расстояния между символами),
 * чтобы в конце придти к общему решению.
 * <p>
 * -- ДОКАЗАТЕЛЬСТВО КОРРЕКТНОСТИ --
 * Возьмем пример первого тест-кейса в задаче abacaba и abaabc и будем заполнять таблицу расстояний Левенштейна. Для
 * начала разберем базовые кейсы. Например, имея две строки, first и second, вторая у нас пустая, поэтому для нее нужно
 * будет вставить каждый символ. Заполняем нулевой ряд в таблице dp счетчиком от нуля до длины первого слова. Также
 * поступаем и в случае, если first пуст, а second имеется. Базовые случаи заполнены, теперь можно продолжать заполнять
 * таблицу. Каждая ячейка в таблице представляет собой минимальное расстояние от одного до другого символа.
 * Действие удаления - берем из левой ячейки по диагонали, действие вставки - значение слева в ряду, замена - значение
 * сверху. При этом нас интересует минимальное расстояние в этих трех ячейках. Если символы различны, мы прибавляем
 * единицу к минимальному расстоянию, иначе - просто берем значение по диагонали (действие замены).
 * <p>
 * Проверяем для второй буквы второго слова 'b', так как первый ряд базовый и уже заполнен. B и a отличаются, сверху
 * значение 0, прибавляем 1 и записываем в ячейку. B и b равны, берем значение по диагонали. B и a отличаются, минимальное
 * расстояние (слева) равно 0, прибавляем единицу и записываем в ячейку. И так далее для остальных символов. Ответ будет
 * в крайней правой ячейке.
 * <p>
 * -- ВРЕМЕННАЯ СЛОЖНОСТЬ --
 * Итоговая сложность алгоритма составляет O (n * m) - длина первого слова + 1, умноженная на длину второго слова + 1.
 * Все остальные операции (считывание данных, разбивка слов на стринговые массивы, заполнение первой строки и первой
 * колонки составляет O(k), где k - количество символов, что является меньше, чем O (n * m).
 * <p>
 * -- ПРОСТРАНСТВЕННАЯ СЛОЖНОСТЬ --
 * Размер dp O ((n + 1) * (m + 1)), два массива для двух слов O (n) и O (m), разбитые по-буквенно и одна переменная для
 * хранения значения минимума. Итоговая пространственная сложность будет O (n * m).
 */
public class LevenshteinDistance {

    public static void main(String[] args) {
        try (BufferedReader reader = new BufferedReader(new FileReader("input.txt"))) {
            String first = reader.readLine();
            String second = reader.readLine();
            System.out.println(findMaxLevenshteinDistance(first.split(""), second.split("")));
        } catch (IOException e) {
            throw new RuntimeException(e);
        }
    }

    private static int findMaxLevenshteinDistance(String[] first, String[] second) {
        int[][] dp = new int[first.length + 1][second.length + 1];
        for (int i = 0; i <= first.length; i++) {
            dp[i][0] = i;
        }
        for (int i = 0; i <= second.length; i++) {
            dp[0][i] = i;
        }
        int min;

        for (int i = 1; i <= first.length; i++) {
            for (int j = 1; j <= second.length; j++) {
                min = Math.min(dp[i - 1][j], Math.min(dp[i][j - 1], dp[i - 1][j - 1]));
                if (first[i - 1].equals(second[j - 1])) {
                    dp[i][j] = dp[i - 1][j - 1];
                } else {
                    dp[i][j] = min + 1;
                }
            }
        }

        return dp[first.length][second.length];
    }
}
